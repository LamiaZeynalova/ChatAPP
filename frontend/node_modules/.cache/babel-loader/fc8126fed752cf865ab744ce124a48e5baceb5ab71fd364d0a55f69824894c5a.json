{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\Chat-App-Full-stack\\\\frontend\\\\src\\\\components\\\\Contact\\\\Contacts.jsx\",\n  _s = $RefreshSig$();\nimport SingleContact from \"./SingleContact\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setConversations } from \"../../slices/conversations.slice\";\nimport { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Contacts = () => {\n  _s();\n  const dispatch = useDispatch();\n  const conversations = useSelector(state => state.conversations.conversations);\n  const getAllConversations = async () => {\n    try {\n      const response = await fetch('/api/users');\n      const data = await response.json();\n      // console.log(data);\n\n      if (!response.ok) {\n        console.log(`Failed to get all conversations`);\n      }\n      if (response.ok) {\n        dispatch(setConversations(data));\n      }\n    } catch (error) {\n      console.log(`Fetch error: ${error.message}`);\n    }\n  };\n  useEffect(() => {\n    getAllConversations();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-[#F6F6F6] py-5 rounded-2xl flex-1 h-full overflow-y-scroll\",\n    children: conversations === null || conversations === void 0 ? void 0 : conversations.map((conversation, index, array) => {\n      return /*#__PURE__*/_jsxDEV(SingleContact, {\n        conversation: conversation,\n        isLastOne: index === array.length - 1\n      }, conversation._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(Contacts, \"pGYsT0pzv3DrpR7Hp6VfZ5OzIjU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Contacts;\nexport default Contacts;\nvar _c;\n$RefreshReg$(_c, \"Contacts\");","map":{"version":3,"names":["SingleContact","useSelector","useDispatch","setConversations","useEffect","jsxDEV","_jsxDEV","Contacts","_s","dispatch","conversations","state","getAllConversations","response","fetch","data","json","ok","console","log","error","message","className","children","map","conversation","index","array","isLastOne","length","_id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/Chat-App-Full-stack/frontend/src/components/Contact/Contacts.jsx"],"sourcesContent":["import SingleContact from \"./SingleContact\";\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { setConversations } from \"../../slices/conversations.slice\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst Contacts = () => {\r\n  const dispatch = useDispatch();\r\n  const conversations = useSelector(\r\n    (state) => state.conversations.conversations\r\n  );\r\n\r\n  const getAllConversations = async () => {\r\n    try {\r\n      const response = await fetch('/api/users');\r\n      const data = await response.json();\r\n      // console.log(data);\r\n\r\n      if (!response.ok) {\r\n        console.log(`Failed to get all conversations`);\r\n      }\r\n\r\n      if (response.ok) {\r\n        dispatch(setConversations(data));\r\n      }\r\n\r\n    } catch (error) {\r\n      console.log(`Fetch error: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAllConversations();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"bg-[#F6F6F6] py-5 rounded-2xl flex-1 h-full overflow-y-scroll\">\r\n      {conversations?.map((conversation, index, array) => {\r\n        return <SingleContact key={conversation._id} conversation={conversation} isLastOne={index === array.length - 1} />;\r\n\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Contacts;\r\n"],"mappings":";;AAAA,OAAOA,aAAa,MAAM,iBAAiB;AAC3C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,gBAAgB,QAAQ,kCAAkC;AACnE,SAASC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAMQ,aAAa,GAAGT,WAAW,CAC9BU,KAAK,IAAKA,KAAK,CAACD,aAAa,CAACA,aACjC,CAAC;EAED,MAAME,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,CAAC;MAC1C,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC;;MAEA,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;QAChBC,OAAO,CAACC,GAAG,CAAE,iCAAgC,CAAC;MAChD;MAEA,IAAIN,QAAQ,CAACI,EAAE,EAAE;QACfR,QAAQ,CAACN,gBAAgB,CAACY,IAAI,CAAC,CAAC;MAClC;IAEF,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdF,OAAO,CAACC,GAAG,CAAE,gBAAeC,KAAK,CAACC,OAAQ,EAAC,CAAC;IAC9C;EACF,CAAC;EAEDjB,SAAS,CAAC,MAAM;IACdQ,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEN,OAAA;IAAKgB,SAAS,EAAC,+DAA+D;IAAAC,QAAA,EAC3Eb,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEc,GAAG,CAAC,CAACC,YAAY,EAAEC,KAAK,EAAEC,KAAK,KAAK;MAClD,oBAAOrB,OAAA,CAACN,aAAa;QAAwByB,YAAY,EAAEA,YAAa;QAACG,SAAS,EAAEF,KAAK,KAAKC,KAAK,CAACE,MAAM,GAAG;MAAE,GAApFJ,YAAY,CAACK,GAAG;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAsE,CAAC;IAEpH,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC1B,EAAA,CArCID,QAAQ;EAAA,QACKL,WAAW,EACND,WAAW;AAAA;AAAAkC,EAAA,GAF7B5B,QAAQ;AAuCd,eAAeA,QAAQ;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}